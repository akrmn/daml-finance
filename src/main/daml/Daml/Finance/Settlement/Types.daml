-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Types where

import DA.List qualified as L
import Daml.Finance.Interface.Asset.Account qualified as Account (R, view)
import Daml.Finance.Interface.Asset.Types (AccountKey)
import Daml.Finance.Interface.Common.Util (fetchInterfaceByKey)

-- | An enum that captures the settlement status of a trade.
data SettlementStatus
  = SettlementStatus_Pending
    -- ^ An active trade prior to settlement
  | SettlementStatus_Instructed
    -- ^ A trade that has been instructed for settlement
  | SettlementStatus_Settled
    -- ^ A trade that has been settled
  deriving (Eq, Show)

validateCustodianToOwnerRoute : Party -> Party -> [AccountKey] -> Update Party
validateCustodianToOwnerRoute agent owner custodianToOwnerRoute = foldl
  (\acc k -> do
      previousCustodian <- acc
      account <- fetchInterfaceByKey @Account.R k
      let v = Account.view account
      assertMsg ("owners must match (" <> show v.owner <> " /= " <>
        show previousCustodian <> ")") $ v.owner == previousCustodian
      pure v.custodian
  )
  (pure owner) (reverse custodianToOwnerRoute)

validateSenderToReceiverRoute : DA.Internal.Record.HasField "custodian" r Party => Party -> Party -> p -> [AccountKey] -> [r] -> Update Party
validateSenderToReceiverRoute agent sender receiver routeToSender routeToReceiver =
  do
    assertMsg ("root custodians must match (" <> show (L.head routeToSender).custodian
      <> "/=" <> show (L.head routeToReceiver).custodian <> ")")
      ((L.head routeToSender).custodian == (L.head routeToReceiver).custodian)
    validateCustodianToOwnerRoute agent sender routeToSender
