-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Transfer where

import DA.Map qualified as M (empty)
import DA.Set (empty)
import Daml.Finance.Interface.Common.Types (Parties)
import Daml.Finance.Interface.Settlement.Instructable qualified as Instructable (HasImplementation, I, Instruct(..), View(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Execute(..))
import Daml.Finance.Interface.Settlement.Settleable qualified as Settleable (HasImplementation, I, View(..))
import Daml.Finance.Interface.Settlement.Types (Step)
import Daml.Finance.Settlement.Instruction qualified as Instruction (Instruction(..), T)

type T = Transfer

instance Settleable.HasImplementation T
template Transfer
  with
    requestors : Parties
    settler : Party
    step : Step
    instructionId : Text
  where
    signatory requestors
    observer settler, step.sender, step.receiver

    implements Settleable.I where
      view = Settleable.View with settler; steps = [step]
      settleImpl = do
        (instructionCid, _) <- fetchByKey @Instruction.T (requestors, instructionId)
        transferableCid <- exercise instructionCid Instruction.Execute
        pure [transferableCid]

instance Instructable.HasImplementation TransferFactory
template TransferFactory
  with
    requestors : Parties
  where
    signatory requestors

    implements Instructable.I where
      view = Instructable.View with requestors
      instructImpl Instructable.Instruct{settler; id; steps} = do
        let [step] = steps
        instructionCid <- toInterfaceContractId <$> create Instruction.Instruction with requestors; settler; signed = empty; step; allocation = None; account = None; id; observers = M.empty
        settleableCid <- toInterfaceContractId <$> create Transfer with requestors; settler; step; instructionId = id
        pure (settleableCid, [instructionCid])
