-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Equity.Lifecycle.CorporateAction where

import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I, Implementation)
import Daml.Finance.Interface.Lifecycle.Lifecyclable qualified as Lifecyclable (I, Implementation)

type I = CorporateAction
type V = View

-- | View for `CorporateAction`.
data View = View
  with
    offerer : Party
      -- ^ Party which offers the Corporate Action to investors.
    id : Text
      -- ^ Equity lifecycle identifier.
    effectiveDate : Date
      -- ^ Date when the lifecycle is to be executed.
  deriving (Eq, Ord, Show)

-- | An interface for a generic corporate action.
interface CorporateAction where
  view : View
    -- ^ Acquire the default interface view.
  asLifecyclable : Lifecyclable.I
    -- ^ Conversion to `Lifecyclable` interface.
  asEvent : Event.I
    -- ^ Conversion to `Event` interface.

  nonconsuming choice GetView : View
    -- ^ Retrieves the instrument view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

-- | Type constraint used to require templates implementing `CorporateAction` to also
-- implement `Lifecyclable.I` and `Event.I`
type Implementation t = (HasToInterface t I, Lifecyclable.Implementation t, Event.Implementation t)
instance HasToInterface I Lifecyclable.I where _toInterface = asLifecyclable
instance HasToInterface I Event.I where _toInterface = asEvent
class (Implementation t) => HasImplementation t
instance HasImplementation I
