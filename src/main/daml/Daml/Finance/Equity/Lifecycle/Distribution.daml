-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Equity.Lifecycle.Distribution where

import DA.Date (toDateUTC)
import DA.Time (time)
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (K, Q)
import Daml.Finance.Interface.Common.Types (Observers)
import Daml.Finance.Interface.Common.Util (flattenObservers)
import Daml.Finance.Interface.Equity.Lifecycle.CorporateAction qualified as CorporateAction (I, View(..))
import Daml.Finance.Interface.Lifecycle.Clock qualified as Clock (view)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I, View(..))
import Daml.Finance.Interface.Lifecycle.Lifecyclable qualified as Lifecyclable (HasImplementation, I, Lifecycle(..), View(..))
import Daml.Finance.Lifecycle.Effect (Effect(..))

type T = Distribution

instance Lifecyclable.HasImplementation T
-- | Distribution of units of an instrument for each unit of a target instrument (e.g., share or cash dividends).
template Distribution
  with
    issuer : Party
      -- ^ The target instrument's issuer.
    effectiveDate : Date
      -- ^ The effective date of the distribution.
    perUnitDistribution : [Instrument.Q]
      -- ^ Distributed items.
    currentInstrument : Instrument.K
      -- ^ Target instrument before the distribution takes place.
    newInstrument : Instrument.K
      -- ^ Target instrument after the distribution has taken place.
    id : Text
      -- ^ A textual identifier.
    observers : Observers
      -- ^ Observers.
  where
    signatory issuer
    observer flattenObservers observers

    ensure
      currentInstrument.id.label == newInstrument.id.label &&
      currentInstrument.depository == newInstrument.depository &&
      currentInstrument.issuer == newInstrument.issuer

    implements CorporateAction.I where
      asEvent = toInterface @Event.I this
      asLifecyclable = toInterface @Lifecyclable.I this
      view = CorporateAction.View with offerer = issuer; effectiveDate; id

    implements Lifecyclable.I where
      view = Lifecyclable.View with lifecycler = issuer
      lifecycleImpl Lifecyclable.Lifecycle{ruleName; settler; clockCid} self = do
        currentDate <- toDateUTC . (.clockTime) . Clock.view <$> fetch clockCid
        if currentDate == effectiveDate
        then do
          effectCid <- toInterfaceContractId <$> create Effect
            with
              provider = issuer
              settler
              targetInstrument = currentInstrument
              producedInstrument = Some newInstrument
              consumed = []
              produced = perUnitDistribution
              settlementDate = effectiveDate
              id
              observers
          pure (self, [effectCid])
        else do
          pure (self, [])

    implements Event.I where
      view = Event.View with eventTime = time effectiveDate 08 00 00
